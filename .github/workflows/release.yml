name: Release
on:
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'
      - uses: actions/setup-node@v4.0.2
        with:
          node-version: 20
          cache: 'yarn'
      - name: node_modules cache
        uses: actions/cache@v4.0.2
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}
      - name: Prepare Toolchain (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -qy binutils-aarch64-linux-gnu gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
      - name: Prepare Vulkan SDK
        if: runner.os == 'Linux'
        uses: humbletim/setup-vulkan-sdk@v1.2.0
        with:
          vulkan-query-version: 1.3.204.0
          vulkan-components: Vulkan-Headers, Vulkan-Loader
          vulkan-use-cache: true
      - name: Prepare CUDA Toolkit
        if: runner.os != 'macOS'
        uses: Jimver/cuda-toolkit@v0.2.15
        id: cuda-toolkit
        with:
          cuda: '11.8.0'
      - name: Prepare OpenCL SDK
        if: runner.os == 'Windows'
        run: |
          wget https://github.com/KhronosGroup/OpenCL-SDK/releases/download/v2023.12.14/OpenCL-SDK-v2023.12.14-Win-x64.zip
          unzip OpenCL-SDK-v2023.12.14-Win-x64.zip -d OpenCL-SDK
      - name: Install dependencies
        run: yarn install
      - name: Build (Linux)
        if: runner.os == 'Linux'
        run: |
          yarn clean && yarn build-native -a x86_64 --CDLLAMA_CUDA=1
          yarn clean && yarn build-native -a aarch64 --cc aarch64-linux-gnu-gcc --cxx aarch64-linux-gnu-g++ --CDLLAMA_CLBLAST=1 --CDCLBlast_DIR=OpenCL-SDK
      - name: Build (Windows)
        if: runner.os == 'Windows'
        run: |
          yarn clean && yarn build-native -a x86_64 --CDLLAMA_CUDA=1
          yarn clean && yarn build-native -a x86_64 --CDLLAMA_CLBLAST=1 --CDCLBlast_DIR=OpenCL-SDK
      - name: Build (macOS)
        if: runner.os == 'macOS'
        run: |
          yarn clean && yarn build-native
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bin
          path: bin
          retention-days: 3
          merge-multiple: true
  publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'
      - uses: actions/setup-node@v4.0.2
        with:
          node-version: 20
          cache: 'yarn'
      - name: node_modules cache
        uses: actions/cache@v4.0.2
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}
      - name: Download bundled files
        uses: actions/download-artifact@v4
        with:
          name: bin
          path: bin
      - run: yarn install
      - run: yarn build
      - name: Publish to NPM
        run: yarn publish --access public
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
